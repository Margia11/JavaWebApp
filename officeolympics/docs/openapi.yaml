openapi: 3.0.3
info:
  title: Office Olympics - OpenAPI 3.0
  description: |
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost.swagger.io/api/v3
tags:
  - name: user
    description: Operations about user
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAlreadyExist'
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by username
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'username'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'          
        '400':
          description: Invalid username
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFound'
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent company
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResponse'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /company:
    post:
      tags:
        - company
      summary: Create company
      description: This can only be done by the logged in user.
      operationId: createCompany
      requestBody:
        description: Created company object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyRequest'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyAlreadyExist'
  /company/{vatNumber}:
    get:
      tags:
        - company
      summary: Get company by vatNumber
      description: ''
      operationId: getCompanyByVatNumber
      parameters:
        - name: vatNumber
          in: path
          description: 'vatNumber'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'          
        '400':
          description: Invalid vatNumber
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyNotFound'
    put:
      tags:
        - company
      summary: Update company
      description: This can only be done by the logged in user.
      operationId: updateCompany
      parameters:
        - name: vatNumber
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyResponse'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - company
      summary: Delete company
      description: This can only be done by the logged in user.
      operationId: deleteCompany
      parameters:
        - name: vatNumber
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid vatNumber
        '404':
          description: Company not found
  /group:
    post:
      tags:
        - group
      summary: Create group
      description: This can only be done by the logged in user.
      operationId: createGroup
      requestBody:
        description: Created group object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupAlreadyExist'
  /group/{id}:
    get:
      tags:
        - group
      summary: Get group by id
      description: ''
      operationId: getGroupById
      parameters:
        - name: id
          in: path
          description: 'id_group'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'          
        '400':
          description: Invalid id_group
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupNotFound'
    put:
      tags:
        - group
      summary: Update group
      description: This can only be done by the logged in user.
      operationId: updateGroup
      parameters:
        - name: id
          in: path
          description: id_group that need to be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - group
      summary: Delete group
      description: This can only be done by the logged in user.
      operationId: deleteGroup
      parameters:
        - name: id
          in: path
          description: id_group that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid id_group
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupNotFound'
  /challenge:
    post:
      tags:
        - challenge
      summary: Create challenge
      description: This can only be done by the logged in user.
      operationId: createChallenge
      requestBody:
        description: Created challenge object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeRequest'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeAlreadyExist'
  /challenge/{id}:
    get:
      tags:
        - challenge
      summary: Get challenge by id
      description: ''
      operationId: getChallengeById
      parameters:
        - name: id
          in: path
          description: 'id_challenge'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeResponse'          
        '400':
          description: Invalid id_challenge
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeNotFound'
    put:
      tags:
        - challenge
      summary: Update challenge
      description: This can only be done by the logged in user.
      operationId: updateChallenge
      parameters:
        - name: id
          in: path
          description: id_challenge that need to be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent challenge
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeRequest'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - challenge
      summary: Delete challenge
      description: This can only be done by the logged in user.
      operationId: deleteChallenge
      parameters:
        - name: id
          in: path
          description: id_challenge that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid id_challenge
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeNotFound'
components:
  schemas:
    UserRequest:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        avatar:
          type: string
          format: binary
        role:
          type: string
          enum:
            - BOARD
            - USER
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        role:
          type: string
          enum:
            - BOARD
            - USER
    UserAlreadyExist:
      type: object
      properties:
        code:
          type: string
          example: 9999
        error:
          type: string
          example: USER_ALREADY_EXIST
    UserNotFound:
      type: object
      properties:
        code:
          type: string
          example: 9999
        error:
          type: string
          example: USER_NOT_FOUND
    CompanyRequest:
      type: object
      properties:
        name:
          type: string
          example: plant ict srl
        vatNumber:
          type: string
          example: 16165151003
        description:
          type: string
          example: vamos
        logo:
          type: string
          format: binary
    CompanyResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: plant ict srl
        vatNumber:
          type: string
          example: 16165151003
        description:
          type: string
          example: vamos
        logo:
          type: string
          format: binary
    CompanyAlreadyExist:
      type: object
      properties:
        code:
          type: string
          example: 9999
        error:
          type: string
          example: COMPANY_ALREADY_EXIST
    CompanyNotFound:
      type: object
      properties:
        code:
          type: string
          example: 9999
        error:
          type: string
          example: COMPANY_NOT_FOUND
    GroupRequest:
      type: object
      properties:
        company:
          type: string
          example: vatNumber
        type:
          type: string
          example: DEV
        name:
          type: string
          example: TEAM1
        description:
          type: string
          example: description
    GroupResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        company:
          $ref: '#/components/schemas/CompanyResponse'
        type:
          type: string
          example: DEV
        name:
          type: string
          example: TEAM1
        description:
          type: string
          example: description
    GroupAlreadyExist:
      type: object
      properties:
        code:
          type: string
          example: 9999
        error:
          type: string
          example: GROUP_ALREADY_EXIST
    GroupNotFound:
      type: object
      properties:
        code:
          type: string
          example: 9999
        error:
          type: string
          example: GROUP_NOT_FOUND
    ChallengeRequest:
      type: object
      properties:
        user:
          type: string
          example: username
        name:
          type: string
          example: nameChallenge
        description:
          type: string
          example: description
    ChallengeResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        user:
          $ref: '#/components/schemas/UserResponse'
        name:
          type: string
          example: nameChallenge
        description:
          type: string
          example: description
    ChallengeAlreadyExist:
      type: object
      properties:
        code:
          type: string
          example: 9999
        error:
          type: string
          example: CHALLENGE_ALREADY_EXIST
    ChallengeNotFound:
      type: object
      properties:
        code:
          type: string
          example: 9999
        error:
          type: string
          example: CHALLENGE_NOT_FOUND
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header